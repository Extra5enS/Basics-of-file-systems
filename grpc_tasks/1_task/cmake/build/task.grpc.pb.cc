// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: task.proto

#include "task.pb.h"
#include "task.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* TaskOne_method_names[] = {
  "/TaskOne/Triger",
};

std::unique_ptr< TaskOne::Stub> TaskOne::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< TaskOne::Stub> stub(new TaskOne::Stub(channel));
  return stub;
}

TaskOne::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Triger_(TaskOne_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status TaskOne::Stub::Triger(::grpc::ClientContext* context, const ::Request& request, ::Answer* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Request, ::Answer, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Triger_, context, request, response);
}

void TaskOne::Stub::experimental_async::Triger(::grpc::ClientContext* context, const ::Request* request, ::Answer* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Request, ::Answer, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Triger_, context, request, response, std::move(f));
}

void TaskOne::Stub::experimental_async::Triger(::grpc::ClientContext* context, const ::Request* request, ::Answer* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Triger_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Answer>* TaskOne::Stub::PrepareAsyncTrigerRaw(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Answer, ::Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Triger_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Answer>* TaskOne::Stub::AsyncTrigerRaw(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTrigerRaw(context, request, cq);
  result->StartCall();
  return result;
}

TaskOne::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TaskOne_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TaskOne::Service, ::Request, ::Answer, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TaskOne::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Request* req,
             ::Answer* resp) {
               return service->Triger(ctx, req, resp);
             }, this)));
}

TaskOne::Service::~Service() {
}

::grpc::Status TaskOne::Service::Triger(::grpc::ServerContext* context, const ::Request* request, ::Answer* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


